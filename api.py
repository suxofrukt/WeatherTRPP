import os
import logging
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Update, Message
from aiogram.filters import Command
from dotenv import load_dotenv
from weather_api import get_weather, get_forecast
from database import get_pool, save_request
from datetime import datetime
from aiogram.types import Message
from database import get_history

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# Aiogram setup
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
pool = None

# –ö–æ–º–∞–Ω–¥—ã
@router.message(Command("start"))
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /weather <–≥–æ—Ä–æ–¥>, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.\n–ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞")

@router.message(Command("weather"))
async def weather_command(message: Message):
    global pool
    if not pool:
        pool = await get_pool()

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /weather –ú–æ—Å–∫–≤–∞")
        return

    city = args[1]
    weather_info = await get_weather(city)
    await message.answer(weather_info)
    await save_request(pool, message.from_user.username, city, datetime.now())

@router.message(Command("forecast"))
async def forecast_command(message: Message):
    global pool
    if not pool:
        pool = await get_pool()

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /forecast –ú–æ—Å–∫–≤–∞")
        return

    city = args[1]
    forecast_info = await get_forecast(city)
    await message.answer(forecast_info)
    await save_request(pool, message.from_user.username, city, datetime.now())

@router.message(Command("history"))
async def history_command(message: Message):
    print(">>> –°–†–ê–ë–û–¢–ê–õ –•–ï–ù–î–õ–ï–† /history")
    global pool
    if not pool:
        pool = await get_pool()

    username = message.from_user.username
    if not username:
        await message.answer("–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.")
        return

    rows = await get_history(pool, username)

    if not rows:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.")
        return

    history_text = "\n".join([f"üìç {r['city']} ‚Äî {r['timestamp'].strftime('%Y-%m-%d %H:%M')}" for r in rows])
    await message.answer(f"üïò –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n{history_text}")

@app.get("/")
async def root():
    return {"status": "alive"}

# Webhook
@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        body = await request.json()
        print("–ü–æ–ª—É—á–µ–Ω update:", body)  # –æ—Ç–ª–∞–¥–∫–∞
        update = Update(**body)
        await dp.feed_update(bot, update)
        return {"ok": True}
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:")
        return {"ok": False, "error": str(e)}

# –°—Ç–∞—Ä—Ç
@app.on_event("startup")
async def on_startup():
    global pool
    pool = await get_pool()
    print("API –∑–∞–ø—É—â–µ–Ω, pool —Å–æ–∑–¥–∞–Ω")
