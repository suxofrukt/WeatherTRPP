import os
import logging
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Update, Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from dotenv import load_dotenv
from weather_api import get_weather, get_forecast
from database import get_pool, save_request, get_history
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
logger = logging.getLogger(__name__)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# Aiogram setup
storage = MemoryStorage()
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
pool = None


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu_keyboard():
    kb = [
        [KeyboardButton(text="üå¶ –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")],
        [KeyboardButton(text="üóì –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")],
        [KeyboardButton(text="üìú –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False)
    return keyboard


def back_keyboard():
    kb = [[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False)
    return keyboard


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è (States) –¥–ª—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ ---
class WeatherStates(StatesGroup):
    waiting_for_city_current = State()
    waiting_for_city_forecast = State()


# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu_keyboard()
    )


@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())


# --- –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å ---
@router.message(F.text == "üå¶ –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
async def ask_city_for_current_weather(message: Message, state: FSMContext):
    await state.set_state(WeatherStates.waiting_for_city_current)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É:",
        reply_markup=back_keyboard()
    )


@router.message(WeatherStates.waiting_for_city_current, F.text)
async def process_current_weather_city(message: Message, state: FSMContext):
    city = message.text
    if city == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
        return

    if "/" in city:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
            reply_markup=back_keyboard()
        )
        return

    await state.clear()
    global pool
    if not pool:
        pool = await get_pool()

    weather_info = await get_weather(city)
    await message.answer(weather_info, reply_markup=main_menu_keyboard())

    if message.from_user and message.from_user.username and "–û—à–∏–±–∫–∞:" not in weather_info:
        try:
            await save_request(pool, message.from_user.username, city, datetime.now())
        except Exception as e:
            logger.error(f"Error saving current weather request: {e}")


# --- –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è ---
@router.message(F.text == "üóì –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
async def ask_city_for_forecast(message: Message, state: FSMContext):
    await state.set_state(WeatherStates.waiting_for_city_forecast)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑:",
        reply_markup=back_keyboard()
    )


@router.message(WeatherStates.waiting_for_city_forecast, F.text)
async def process_forecast_city(message: Message, state: FSMContext):
    city = message.text
    if city == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
        return

    if "/" in city:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
            reply_markup=back_keyboard()
        )
        return

    await state.clear()
    global pool
    if not pool:
        pool = await get_pool()

    forecast_info = await get_forecast(city)
    await message.answer(forecast_info, reply_markup=main_menu_keyboard())

    if message.from_user and message.from_user.username and "–û—à–∏–±–∫–∞:" not in forecast_info:
        try:
            await save_request(pool, message.from_user.username, city, datetime.now())
        except Exception as e:
            logger.error(f"Error saving forecast request: {e}")


# --- –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ ---
async def show_history(message: Message):
    logger.info("API: /history command or button received by show_history")
    global pool
    try:
        if not pool:
            logger.info("API: Pool is None, creating new pool for history.")
            pool = await get_pool()
            logger.info("API: Pool created for history.")

        username = message.from_user.username
        if not username:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram. –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∞.",
                reply_markup=main_menu_keyboard()
            )
            logger.warning(f"API: User {message.from_user.id} has no username for history.")
            return

        rows = await get_history(pool, username)
        logger.info(f"API: Rows fetched for history for {username}: {len(rows) if rows else 0} rows")

        if not rows:
            await message.answer("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.", reply_markup=main_menu_keyboard())
            return

        history_text_parts = [
            f"üìç {idx + 1}. {row['city']} ‚Äî {row['request_time'].strftime('%Y-%m-%d %H:%M')}"
            for idx, row in enumerate(rows)
        ]
        history_text = "\n".join(history_text_parts)

        if len(history_text) > 4000:
            history_text = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í–æ—Ç —á–∞—Å—Ç—å –∏–∑ –Ω–∏—Ö:\n" + history_text[
                                                                                          :3900] + "\n(...)"

        await message.answer(
            f"üïò –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n{history_text}",
            reply_markup=main_menu_keyboard()
        )
        logger.info(f"API: History sent for username: {username}")

    except Exception as e:
        logger.error(f"API: Error in show_history: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_keyboard()
        )


@router.message(F.text == "üìú –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è")
async def history_via_button(message: Message):
    await show_history(message)


@router.message(Command("history"))
async def history_command_handler(message: Message):
    await show_history(message)


# --- Webhook –∏ Startup ---
@app.get("/")
async def root():
    return {"status": "alive"}


@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        body = await request.json()
        logger.debug(f"Received update via webhook: {body}")
        update = Update(**body)
        await dp.feed_update(bot=bot, update=update)
        return {"ok": True}
    except Exception as e:
        logger.exception("Error processing webhook:")
        return {"ok": False, "error": str(e)}


@app.on_event("startup")
async def on_startup():
    global pool
    logger.info("API: Application startup...")
    if pool is None:
        logger.info("API: Startup - creating database pool.")
        pool = await get_pool()
        logger.info("API: Database pool created on startup.")
    else:
        logger.info("API: Startup - database pool already exists.")

    webhook_info = await bot.get_webhook_info()
    if not webhook_info.url:
        logger.warning("Webhook is NOT SET. Please set it using set_webhook.py or other means.")
    else:
        logger.info(f"Webhook is set to: {webhook_info.url}")