import os
import logging
import datetime  # –ò—Å–ø–æ–ª—å–∑—É–µ–º datetime.datetime –∏ datetime.time
import pytz

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, Router, F, types  # –î–æ–±–∞–≤–∏–ª–∏ types –¥–ª—è callback_query
from aiogram.types import Update, Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Ç–≤–æ–∏—Ö –º–æ–¥—É–ª–µ–π
from weather_api import get_weather, get_forecast, check_for_precipitation_in_forecast
from database import (
    get_pool, save_request, get_history,
    add_subscription, remove_subscription, get_user_subscriptions,
    get_all_active_subscriptions_with_details, update_last_alert_time
    # get_active_subscriptions_for_notification - –µ—Å–ª–∏ —Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è send_weather_notification –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —ç—Ç–æ —Ç–æ–∂–µ –Ω–µ –Ω—É–∂–Ω–æ
)

# APScheduler
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# from pytz import utc # pytz.utc –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –¥–ª—è –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
logger = logging.getLogger(__name__)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# Aiogram setup
storage = MemoryStorage()
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
pool = None
scheduler = AsyncIOScheduler(timezone=pytz.utc)


# --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ô FSM (–û–î–ù–û –û–ë–™–ï–î–ò–ù–ï–ù–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï) ---
class WeatherStates(StatesGroup):
    waiting_for_city_current = State()
    waiting_for_city_forecast = State()

    # –î–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    waiting_for_city_subscribe = State()

    # –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    managing_subscription_city_choice = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ (—Ç–µ–∫—Å—Ç–æ–º) –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    managing_specific_city_action_choice = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ (—Ç–µ–∫—Å—Ç–æ–º)

    # –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–∞–π–º–∑–æ–Ω—ã (–æ—Å—Ç–∞—é—Ç—Å—è)
    choosing_timezone_text_input = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º–∑–æ–Ω—ã (—Ç–µ–∫—Å—Ç–æ–º)
    entering_notification_time_text_input = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu_keyboard():
    kb = [
        [KeyboardButton(text="üå¶ –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å"), KeyboardButton(text="üóì –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")],
        [KeyboardButton(text="üîî –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"), KeyboardButton(text="üìú –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False)


def subscriptions_menu_keyboard():  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –∏–ª–∏ –ø–æ—Å–ª–µ –æ—Ç–ø–∏—Å–∫–∏
    kb = [
        [KeyboardButton(text="‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥–æ—Ä–æ–¥")],
        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=True)

def back_to_main_menu_keyboard(): # –ü—Ä–æ—Å—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], resize_keyboard=True, one_time_keyboard=True)

def back_to_subs_list_keyboard(): # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤")]], resize_keyboard=True, one_time_keyboard=True)

def subscribed_cities_reply_keyboard(subscriptions: list):
    buttons = []
    for sub in subscriptions:
        buttons.append([KeyboardButton(text=sub['city'])])
    buttons.append([KeyboardButton(text="‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥")])
    buttons.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=False) # False - —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
def city_management_actions_reply_keyboard(city_name: str): # city_name –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –æ–±—â–∏–µ
    kb = [
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è/–ø–æ—è—Å")],
        [KeyboardButton(text="‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞")],
        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False)

def back_keyboard():  # –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
    kb = [[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False)


# –°–ª–æ–≤–∞—Ä—å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–∞–π–º–∑–æ–Ω –¥–ª—è Inline-–∫–Ω–æ–ø–æ–∫
POPULAR_TIMEZONES_TEXT_REPLY = { # –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –±—É–¥—É—Ç –∫–ª—é—á–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    "–ú–æ—Å–∫–≤–∞ (UTC+3)": "Europe/Moscow", "–õ–æ–Ω–¥–æ–Ω (GMT/BST)": "Europe/London",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (UTC+5)": "Asia/Yekaterinburg", "–ù—å—é-–ô–æ—Ä–∫ (EST/EDT)": "America/New_York",
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ (UTC+7)": "Asia/Novosibirsk", "–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å (PST/PDT)": "America/Los_Angeles",
    "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (UTC+10)": "Asia/Vladivostok", "–ë–µ—Ä–ª–∏–Ω (CET/CEST)": "Europe/Berlin",
    "–¢–æ–∫–∏–æ (UTC+9)": "Asia/Tokyo", "UTC": "UTC",
}


def timezone_choice_reply_keyboard():
    buttons = []
    row = []
    for display_name in POPULAR_TIMEZONES_TEXT_REPLY.keys():
        row.append(KeyboardButton(text=display_name))
        if len(row) >= 2: # –ü–æ 2 –≤ —Ä—è–¥
            buttons.append(row)
            row = []
    if row: buttons.append(row)
    buttons.append([KeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]) # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)

def initial_config_reply_keyboard(city: str):
    kb = [
        [KeyboardButton(text=f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –∏ –ø–æ—è—Å –¥–ª—è {city}")],
        [KeyboardButton(text="üëå –û—Å—Ç–∞–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (08:00)")], # –£—Ç–æ—á–Ω–∏–ª —Ç–µ–∫—Å—Ç
        [KeyboardButton(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False)

def initial_config_keyboard(city: str):  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    buttons = [
        [InlineKeyboardButton(text=f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –∏ –ø–æ—è—Å –¥–ª—è {city}", callback_data=f"cfgtime_{city}")],
        [InlineKeyboardButton(text="üëå –û—Å—Ç–∞–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (08:00, –ø–æ—è—Å –≥–æ—Ä–æ–¥–∞)", callback_data=f"cfgdef_{city}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def subscribed_cities_keyboard(subscriptions: list, add_new_city_button: bool = True, back_to_main_button: bool = True):
    buttons = []
    for sub in subscriptions:
        buttons.append([KeyboardButton(text=sub['city'])]) # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    if add_new_city_button:
        buttons.append([KeyboardButton(text="‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥")])
    if back_to_main_button:
        buttons.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=False) # one_time=False, —á—Ç–æ–±—ã –Ω–µ —Å–∫—Ä—ã–≤–∞–ª–∞—Å—å

def city_management_actions_keyboard(city_name: str):
    kb = [
        [KeyboardButton(text=f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è/–ø–æ—è—Å –¥–ª—è {city_name}")],
        [KeyboardButton(text=f"‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {city_name}")],
        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤")] # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False)

def subscriptions_list_actions_keyboard(subscriptions: list):  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    buttons = []
    for sub in subscriptions:
        city = sub['city']
        time_obj = sub.get('notification_time')  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
        tz_str = sub.get('timezone', 'UTC')  # –î–µ—Ñ–æ–ª—Ç UTC, –µ—Å–ª–∏ –Ω–µ—Ç
        time_str = time_obj.strftime('%H:%M') if time_obj else "08:00"

        display_text = f"üèôÔ∏è {city} (—É—Ç—Ä–æ–º –≤ {time_str} –ø–æ –ø–æ—è—Å—É {tz_str} + –æ—Å–∞–¥–∫–∏)"
        buttons.append([InlineKeyboardButton(text=display_text, callback_data="noop")])  # noop - –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        buttons.append([
            InlineKeyboardButton(text=f"‚öôÔ∏è –ù–∞—Å—Ç—Ä. {city}", callback_data=f"cfgtime_{city}"),
            InlineKeyboardButton(text=f"‚ûñ –û—Ç–ø–∏—Å. {city}", callback_data=f"unsub_{city}")
        ])
        buttons.append([InlineKeyboardButton(text="-" * 20, callback_data="noop")])  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="cfg_add_new_city")])
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cfg_back_main")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())


@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    # ... (–ª–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–∏—Ç—å –¥–ª—è FSM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
    # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    current_fsm_state = await state.get_state()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    logger.info(f"Back to menu called from state: {current_fsm_state}")
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())


@router.message(F.text == "üå¶ –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
async def ask_city_for_current_weather(message: Message, state: FSMContext):
    await state.set_state(WeatherStates.waiting_for_city_current)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=back_keyboard())


@router.message(WeatherStates.waiting_for_city_current, F.text)
async def process_current_weather_city(message: Message, state: FSMContext):
    city = message.text.strip()
    if city == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
        return
    if not city or "/" in city:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_keyboard())
        return

    await state.clear()
    global pool
    if not pool: pool = await get_pool()

    weather_info = await get_weather(city)
    await message.answer(weather_info, reply_markup=main_menu_keyboard())

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ)
    if message.from_user and message.from_user.username and "–û—à–∏–±–∫–∞:" not in weather_info:
        try:
            await save_request(pool, message.from_user.username, city, datetime.datetime.now())
        except Exception as e:
            logger.error(f"Error saving current weather request for {city}: {e}")


# --- –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è ---
@router.message(F.text == "üóì –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
async def ask_city_for_forecast(message: Message, state: FSMContext):
    await state.set_state(WeatherStates.waiting_for_city_forecast)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=back_keyboard())


@router.message(WeatherStates.waiting_for_city_forecast, F.text)
async def process_forecast_city(message: Message, state: FSMContext):
    city = message.text.strip()
    if city == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
        return
    if not city or "/" in city:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_keyboard())
        return

    await state.clear()
    global pool
    if not pool: pool = await get_pool()

    forecast_info = await get_forecast(city)
    await message.answer(forecast_info, reply_markup=main_menu_keyboard())

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if message.from_user and message.from_user.username and "–û—à–∏–±–∫–∞:" not in forecast_info:
        try:
            await save_request(pool, message.from_user.username, city, datetime.datetime.now())
        except Exception as e:
            logger.error(f"Error saving forecast request for {city}: {e}")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ ---
@router.message(F.text == "üîî –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
async def manage_subscriptions_menu_entry(message: Message, state: FSMContext):
    await state.clear()
    global pool
    if not pool: pool = await get_pool()
    user_id = message.from_user.id
    try:
        subscriptions = await get_user_subscriptions(pool, user_id)
        if subscriptions:
            await state.set_state(WeatherStates.managing_subscription_city_choice)
            subscribed_city_names = [sub['city'] for sub in subscriptions]
            await state.update_data(subscribed_cities=subscribed_city_names,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
                                    raw_subscriptions=subscriptions)  # –ò –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
                                 reply_markup=subscribed_cities_reply_keyboard(subscriptions))
        else:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.",
                                 reply_markup=subscriptions_menu_keyboard())  # –ö–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "–ù–∞–∑–∞–¥"
    except Exception as e:
        logger.error(f"Error fetching subscriptions for user {user_id}: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=main_menu_keyboard())


# –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏–∑ ReplyKeyboard –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.message(WeatherStates.managing_subscription_city_choice, F.text)
async def process_chosen_city_for_management(message: Message, state: FSMContext):
    chosen_text = message.text.strip()
    user_data = await state.get_data()
    subscribed_cities = user_data.get("subscribed_cities", [])

    if chosen_text == "‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥":
        await state.set_state(WeatherStates.waiting_for_city_subscribe)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:",
                             reply_markup=back_to_main_menu_keyboard())  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        return
    elif chosen_text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
        return
    elif chosen_text in subscribed_cities:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–¥–∏–Ω –∏–∑ —Å–≤–æ–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
        await state.update_data(city_being_managed=chosen_text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
        await state.set_state(WeatherStates.managing_specific_city_action_choice)
        # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        raw_subs = user_data.get("raw_subscriptions", [])
        current_sub_details = next((s for s in raw_subs if s['city'] == chosen_text), None)
        time_str = current_sub_details['notification_time'].strftime(
            '%H:%M') if current_sub_details and current_sub_details.get('notification_time') else "08:00"
        tz_str = current_sub_details.get('timezone', 'UTC') if current_sub_details else "UTC"

        await message.answer(
            f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –≥. {chosen_text}.\n"
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {time_str} (—Ç–∞–π–º–∑–æ–Ω–∞: {tz_str}).\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=city_management_actions_reply_keyboard(chosen_text)
        )
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ subscribed_cities_reply_keyboard –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π


# –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
@router.message(WeatherStates.managing_specific_city_action_choice, F.text)
async def process_city_management_action(message: Message, state: FSMContext):
    action_text = message.text.strip()
    user_data = await state.get_data()
    city_to_manage = user_data.get("city_being_managed")

    if not city_to_manage:  # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'.",
                             reply_markup=main_menu_keyboard())
        return

    if action_text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è/–ø–æ—è—Å":
        await state.set_state(WeatherStates.choosing_timezone_text_input)
        # configuring_city —É–∂–µ –µ—Å—Ç—å –∫–∞–∫ city_being_managed –≤ state.update_data()
        await state.update_data(configuring_city=city_to_manage)  # –ü–µ—Ä–µ–∑–∞–ø–∏—à–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        await message.answer(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –≥. {city_to_manage}.\n"
                             "–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
                             reply_markup=timezone_choice_reply_keyboard())
    elif action_text == "‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞":
        global pool
        if not pool: pool = await get_pool()
        user_id = message.from_user.id
        try:
            await remove_subscription(pool, user_id, city_to_manage)
            await state.clear()
            await message.answer(f"üóë –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≥. {city_to_manage}.", reply_markup=main_menu_keyboard())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç {city_to_manage}: {e}", exc_info=True)
            await state.clear()
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ.", reply_markup=main_menu_keyboard())
    elif action_text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤":
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∏–∑ manage_subscriptions_menu_entry
        subscriptions = await get_user_subscriptions(pool, message.from_user.id)
        if subscriptions:
            await state.set_state(WeatherStates.managing_subscription_city_choice)
            subscribed_city_names = [sub['city'] for sub in subscriptions]
            await state.update_data(subscribed_cities=subscribed_city_names, raw_subscriptions=subscriptions)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=subscribed_cities_reply_keyboard(subscriptions))
        else:
            await state.clear()
            await message.answer("–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.", reply_markup=main_menu_keyboard())
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏.",
                            reply_markup=city_management_actions_reply_keyboard(city_to_manage))


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥–æ—Ä–æ–¥" (–∏–∑ subscriptions_menu_keyboard)
@router.message(F.text == "‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥–æ—Ä–æ–¥")
async def ask_city_to_subscribe(message: Message, state: FSMContext):  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    await state.set_state(WeatherStates.waiting_for_city_subscribe)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:",
                         reply_markup=back_to_main_menu_keyboard())  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"


# api.py

@router.message(WeatherStates.waiting_for_city_subscribe, F.text)
async def process_new_city_for_subscription(message: Message, state: FSMContext):
    city_input = message.text.strip()
    user_id = message.from_user.id # –ü–æ–ª—É—á–∏–º user_id –≤ –Ω–∞—á–∞–ª–µ

    if city_input == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
        return

    if not city_input or "/" in city_input:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
                            reply_markup=back_to_main_menu_keyboard()) # –ò—Å–ø–æ–ª—å–∑—É–µ–º back_to_main_menu_keyboard –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        return

    global pool
    if not pool:
        pool = await get_pool()

    weather_check = await get_weather(city_input)
    if "–û—à–∏–±–∫–∞:" in weather_check:
        await message.reply(f"–ì–æ—Ä–æ–¥ '{city_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.",
                            reply_markup=back_to_main_menu_keyboard())
        return

    # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä) ---
    user_timezone_str = "UTC"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    city_lower = city_input.lower()
    if city_lower == "–º–æ—Å–∫–≤–∞":
        user_timezone_str = "Europe/Moscow"
    elif city_lower == "–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫":
        user_timezone_str = "Asia/Vladivostok"
    elif "–¥—É–∞–ª–∞" in city_lower or "–∫–∞–º–µ—Ä—É–Ω" in city_lower: # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –ö–∞–º–µ—Ä—É–Ω–∞ - –î—É–∞–ª–∞
        user_timezone_str = "Africa/Douala" # UTC+1
    elif city_lower == "–ª–æ–Ω–¥–æ–Ω":
        user_timezone_str = "Europe/London"
    elif city_lower == "–Ω—å—é-–π–æ—Ä–∫":
        user_timezone_str = "America/New_York"
    # –î–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    logger.info(f"–î–ª—è –≥–æ—Ä–æ–¥–∞ '{city_input}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç–∞–π–º–∑–æ–Ω–∞: {user_timezone_str}")
    # --- –ö–æ–Ω–µ—Ü –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ ---

    try:
        # –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ 08:00:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
        await add_subscription(pool, user_id, city_input,
                               notification_time_str="08:00:00",
                               user_timezone_str=user_timezone_str)
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è user {user_id} –Ω–∞ –≥–æ—Ä–æ–¥ {city_input} —Å —Ç–∞–π–º–∑–æ–Ω–æ–π {user_timezone_str}")

        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ä–∞–∑—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
        await state.update_data(
            configuring_city=city_input,          # –ì–æ—Ä–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            current_timezone=user_timezone_str,   # –¢–µ–∫—É—â–∞—è (–¥–µ—Ñ–æ–ª—Ç–Ω–∞—è) —Ç–∞–π–º–∑–æ–Ω–∞
            current_notif_time="08:00"            # –¢–µ–∫—É—â–µ–µ (–¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ) –≤—Ä–µ–º—è
        )
        await state.set_state(WeatherStates.choosing_timezone_text_input) # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∞–π–º–∑–æ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        await message.answer(
            f"‚úÖ –ì–æ—Ä–æ–¥ {city_input} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏!\n"
            f"–£—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç –≤ 08:00 (—Ç–∞–π–º–∑–æ–Ω–∞: {user_timezone_str}).\n\n"
            "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤—Ä–µ–º—è –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
            "–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
            reply_markup=timezone_choice_reply_keyboard() # –ò—Å–ø–æ–ª—å–∑—É–µ–º ReplyKeyboard –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º–∑–æ–Ω—ã
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user {user_id}, –≥–æ—Ä–æ–¥ {city_input}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                             reply_markup=main_menu_keyboard())
        await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏


# ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏) ...

# –®–∞–≥ 2 –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –≤—ã–±–æ—Ä —Ç–∞–π–º–∑–æ–Ω—ã (—Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç)
@router.message(WeatherStates.choosing_timezone_text_input, F.text)
async def process_timezone_choice_text_input(message: Message, state: FSMContext):
    chosen_tz_text = message.text.strip()
    user_data = await state.get_data()
    city_being_configured = user_data.get("configuring_city")  # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    if not city_being_configured:  # –ü—Ä–æ–≤–µ—Ä–∫–∞
        await state.clear();
        await message.answer("–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'.", reply_markup=main_menu_keyboard());
        return

    if chosen_tz_text == "‚óÄÔ∏è –û—Ç–º–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await state.clear()
        await message.answer(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –≥. {city_being_configured} –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard())
        return

    selected_timezone_iana = POPULAR_TIMEZONES_TEXT_REPLY.get(chosen_tz_text)  # –ò—â–µ–º IANA –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏

    if not selected_timezone_iana:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∫–Ω–æ–ø–∫–∞–º–∏.",
                            reply_markup=timezone_choice_reply_keyboard())
        return

    await state.update_data(selected_timezone=selected_timezone_iana)
    await state.set_state(WeatherStates.entering_notification_time_text_input)
    await message.answer(f"–î–ª—è –≥. {city_being_configured} –≤—ã–±—Ä–∞–Ω –ø–æ—è—Å: {selected_timezone_iana}.\n"
                         "–®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 07:30).",
                         reply_markup=back_to_main_menu_keyboard())  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –¥–ª—è –æ—Ç–º–µ–Ω—ã

# –®–∞–≥ 3 –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
@router.message(WeatherStates.entering_notification_time_text_input, F.text)
async def process_notification_time_text_input(message: Message, state: FSMContext):
    time_input_str = message.text.strip()

    if time_input_str == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":  # –û—Ç–º–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
        await state.clear()
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard())
        return
    try:
        parsed_time = datetime.datetime.strptime(time_input_str, "%H:%M").time()
        notification_time_for_db = parsed_time.strftime("%H:%M:00")
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00).")
        return

    user_data = await state.get_data()
    city_to_configure = user_data.get("configuring_city")
    selected_tz = user_data.get("selected_timezone")

    if not city_to_configure or not selected_tz:
        await message.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑ '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'.")
        await state.clear()
        return

    global pool
    if not pool: pool = await get_pool()
    user_id = message.from_user.id

    try:
        await add_subscription(pool, user_id, city_to_configure,
                               notification_time_str=notification_time_for_db,
                               user_timezone_str=selected_tz)
        await message.answer(
            f"üëç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –£—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≥. {city_to_configure} –±—É–¥–µ—Ç –≤ {parsed_time.strftime('%H:%M')} "
            f"–ø–æ –≤—Ä–µ–º–µ–Ω–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ {selected_tz}.",
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())
    finally:
        await state.clear()


# --- –û—Ç–ø–∏—Å–∫–∞ (—á–µ—Ä–µ–∑ Inline –∫–Ω–æ–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫) ---
@router.callback_query(F.data.startswith("unsub_"))
async def cb_process_unsubscribe_city(callback_query: types.CallbackQuery,
                                      state: FSMContext):
    logger.info(f">>> CB: cb_process_unsubscribe_city called with data: {callback_query.data}")
    await callback_query.answer()
    city_to_unsubscribe = callback_query.data.split("_", 1)[1]

    global pool
    if not pool: pool = await get_pool()
    user_id = callback_query.from_user.id

    try:
        await remove_subscription(pool, user_id, city_to_unsubscribe)
        await callback_query.message.edit_text(
            f"üóë –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≥. {city_to_unsubscribe}."
        )
        # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
        # –ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await bot.send_message(user_id, "–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_menu_keyboard())

    except Exception as e:
        logger.error(f"Error removing subscription for user {user_id}, city {city_to_unsubscribe} via CB: {e}",
                     exc_info=True)
        await callback_query.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "cfg_back_main")
async def cb_back_to_main_menu_from_subs_list(callback_query: types.CallbackQuery, state: FSMContext):
    logger.info(">>> CB: cb_back_to_main_menu_from_subs_list called")
    await callback_query.answer()
    await state.clear()
    try:
        await callback_query.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    except Exception as e:
        logger.warning(f"Could not edit message for cb_back_to_main_menu_from_subs_list: {e}")
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∏–∂–µ
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ReplyKeyboard –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())

@router.callback_query()
async def catch_all_callbacks_debug(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer("DEBUG: Callback –ø–æ–π–º–∞–Ω–æ catch_all") # –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∑–∞–≥—Ä—É–∑–∫—É"
    logger.error(f"!!!!!!!! CATCH_ALL_CALLBACK (DEBUG) !!!!!!!")
    logger.error(f"Data: '{callback_query.data}'") # –°–ê–ú–û–ï –í–ê–ñ–ù–û–ï
    logger.error(f"From User ID: {callback_query.from_user.id}")
    logger.error(f"Message ID: {callback_query.message.message_id if callback_query.message else 'N/A'}")
    logger.error(f"Full CallbackQuery Object: {callback_query.model_dump_json(indent=2)}")
    current_fsm_state = await state.get_state()
    logger.error(f"Current FSM State: {current_fsm_state}")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥–æ—Ä–æ–¥–∞"
@router.message(F.text == "‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥–æ—Ä–æ–¥–∞", flags={"description": "–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –≥–æ—Ä–æ–¥–∞"})
async def ask_for_city_to_unsubscribe_text(message: Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} pressed '‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥–æ—Ä–æ–¥–∞' text button.")
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    global pool
    if not pool:
        pool = await get_pool()

    user_id = message.from_user.id
    try:
        subscriptions = await get_user_subscriptions(pool, user_id)  # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫

        if not subscriptions:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                                 reply_markup=subscriptions_menu_keyboard())  # –ò–ª–∏ main_menu_keyboard()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        city_names = [sub['city'] for sub in subscriptions]
        subs_list_text = "\n".join([f"- {name}" for name in city_names])

        await state.set_state(WeatherStates.waiting_for_city_unsubscribe)
        await message.answer(
            f"–û—Ç –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è?\n–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n{subs_list_text}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Ç–æ—á–Ω–æ —Ç–∞–∫, –∫–∞–∫ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ –≤ —Å–ø–∏—Å–∫–µ, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'.",
            reply_markup=back_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        )
    except Exception as e:
        logger.error(f"Error in ask_for_city_to_unsubscribe_text for user {user_id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞—á–∞—Ç—å –æ—Ç–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                             reply_markup=main_menu_keyboard())


@router.message(WeatherStates.waiting_for_city_unsubscribe, F.text)
async def process_city_for_unsubscription_text(message: Message, state: FSMContext):
    """
    –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏.
    """
    city_to_unsubscribe_input = message.text.strip()
    user_id = message.from_user.id
    logger.info(
        f"User {user_id} entered '{city_to_unsubscribe_input}' for unsubscription. State: {await state.get_state()}")

    if city_to_unsubscribe_input == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        # –†–µ—à–∞–µ–º, –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –æ–Ω –ø—Ä–∏—à–µ–ª –∏–∑ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫, —Ç–æ —Ç—É–¥–∞.
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã - –≤ –≥–ª–∞–≤–Ω–æ–µ.
        await message.answer("–û—Ç–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                             reply_markup=main_menu_keyboard())
        return

    if not city_to_unsubscribe_input:
        await message.reply(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
            reply_markup=back_keyboard())
        return  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    global pool
    if not pool:
        pool = await get_pool()

    try:
        # –í–∞–∂–Ω–æ: –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
        # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —á—É–∂–æ–π –≥–æ—Ä–æ–¥ (—Ö–æ—Ç—è user_id –∑–∞—â–∏—â–∞–µ—Ç).
        current_subscriptions = await get_user_subscriptions(pool, user_id)
        found_subscription_city = None
        for sub in current_subscriptions:
            if sub['city'].lower() == city_to_unsubscribe_input.lower():
                found_subscription_city = sub['city']  # –ë–µ—Ä–µ–º —Ç–æ—á–Ω–æ–µ –∏–º—è –∏–∑ –ë–î –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                break

        if not found_subscription_city:
            await message.reply(
                f"–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥–æ—Ä–æ–¥ '{city_to_unsubscribe_input}'. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
                reply_markup=back_keyboard()
            )
            return  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

        await remove_subscription(pool, user_id, found_subscription_city)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –∏–º—è
        await message.answer(
            f"üóë –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≥. {found_subscription_city}.",
            reply_markup=main_menu_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        )
    except Exception as e:
        logger.error(f"Error during text unsubscription for user {user_id}, city '{city_to_unsubscribe_input}': {e}",
                     exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                             reply_markup=main_menu_keyboard())
    finally:
        await state.clear()


async def show_history(message: Message):  # –£–±–µ—Ä–∏ state: FSMContext, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    global pool
    if not pool: pool = await get_pool()
    logger.info(f"User {message.from_user.id} requested history (via show_history function).")

    username = message.from_user.username
    if not username:
        await message.answer("–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram. –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∞.",
                             reply_markup=main_menu_keyboard())
        return

    try:
        rows = await get_history(pool, username)  # –§—É–Ω–∫—Ü–∏—è –∏–∑ database.py
        if not rows:
            await message.answer("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.", reply_markup=main_menu_keyboard())
            return

        history_text_parts = [f"üìç {idx + 1}. {row['city']} ‚Äî {row['request_time'].strftime('%Y-%m-%d %H:%M')}"
                              for idx, row in enumerate(rows)]
        history_text = "\n".join(history_text_parts)

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(history_text) + len("üïò –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n") > 4096:  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–º–∏—Ç Telegram
            history_text = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í–æ—Ç —á–∞—Å—Ç—å –∏–∑ –Ω–∏—Ö:\n" + history_text[
                                                                                          :3900] + "\n(...)"  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å

        await message.answer(f"üïò –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n{history_text}",
                             reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.error(f"Error fetching/showing history for username {username}: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.", reply_markup=main_menu_keyboard())


@router.message(F.text == "üìú –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è")
async def history_via_button(message: Message):  # –£–±—Ä–∞–ª state: FSMContext
    logger.info(f">>> HISTORY VIA BUTTON HANDLER TRIGGERED for user {message.from_user.id}")
    await show_history(message)


@router.message(Command("history"))  # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∏ –∫–æ–º–∞–Ω–¥—É /history
async def history_command_handler(message: Message):  # –£–±—Ä–∞–ª state: FSMContext
    logger.info(f">>> HISTORY COMMAND HANDLER TRIGGERED for user {message.from_user.id}")
    await show_history(message)


@router.message()
async def catch_all_messages_debug(message: Message, state: FSMContext):
    logger.error(f"!!!!!!!! CATCH_ALL_MESSAGE (DEBUG) !!!!!!!")
    logger.error(f"Text: '{message.text}'") # –°–ê–ú–û–ï –í–ê–ñ–ù–û–ï
    logger.error(f"Chat ID: {message.chat.id}")
    logger.error(f"User ID: {message.from_user.id}")
    logger.error(f"Content Type: {message.content_type}")
    logger.error(f"Full Message Object: {message.model_dump_json(indent=2)}")
    current_fsm_state = await state.get_state()
    logger.error(f"Current FSM State: {current_fsm_state}")

# --- –ü–õ–ê–ù–ò–†–û–í–©–ò–ö: –î–í–ï –§–£–ù–ö–¶–ò–ò –†–ê–°–°–´–õ–ö–ò ---
# 1. send_daily_morning_forecast_local_time (–∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç—ã–≤–∞–µ—Ç timezone –∏ notification_time)
async def send_daily_morning_forecast_local_time():
    # ... (–¢–û–ß–ù–û –¢–ê–ö–û–ô –ñ–ï –ö–û–î, –ö–ê–ö –í –ü–†–ï–î–´–î–£–©–ï–ú –û–¢–í–ï–¢–ï –î–õ–Ø –≠–¢–û–ô –§–£–ù–ö–¶–ò–ò)
    global pool, bot
    if not pool or not bot: logger.warning("Scheduler (Morning): Pool or Bot not initialized."); return
    logger.info("Scheduler (Morning): >>> Checking for local 08:00 AM forecasts.")
    current_utc_dt = datetime.datetime.now(pytz.utc)
    try:
        all_subscriptions = await get_all_active_subscriptions_with_details(pool)
        if not all_subscriptions: return
        for sub in all_subscriptions:
            user_id, city, user_notification_time_obj, user_timezone_str, _ = sub['user_id'], sub['city'], sub[
                'notification_time'], sub['timezone'], sub.get('last_alert_sent_at')  # _ –¥–ª—è last_alert_sent_at
            if not user_notification_time_obj or not user_timezone_str: continue
            try:
                user_tz = pytz.timezone(user_timezone_str)
            except pytz.UnknownTimeZoneError:
                logger.error(f"Unknown tz {user_timezone_str}"); continue
            user_local_date_today = current_utc_dt.astimezone(user_tz).date()
            target_local_datetime_obj = datetime.datetime.combine(user_local_date_today, user_notification_time_obj)
            target_local_datetime_aware = user_tz.localize(target_local_datetime_obj, is_dst=None)
            target_utc_hour = target_local_datetime_aware.astimezone(pytz.utc).hour
            if (current_utc_dt.hour == target_utc_hour and
                    user_notification_time_obj.minute == 0 and  # –¢–æ—á–Ω–æ –≤ –•–•:00
                    current_utc_dt.minute < 5):
                logger.info(f"Scheduler (Morning): Time for {city} (user {user_id})")
                weather_info = await get_weather(city)
                if "–û—à–∏–±–∫–∞:" not in weather_info:
                    msg = f"‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü–æ–≥–æ–¥–∞ –≤ –≥. {city} –Ω–∞ {user_notification_time_obj.strftime('%H:%M')} –ø–æ –≤–∞—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏:\n\n{weather_info}"
                    await bot.send_message(user_id, msg)
                    logger.info(f"Scheduler (Morning): Sent to {user_id} for {city}")
    except Exception as e:
        logger.error(f"Scheduler (Morning): Error: {e}", exc_info=True)


# 2. send_precipitation_alert (–∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç last_alert_sent_at –∏ check_for_precipitation_in_forecast)
async def send_precipitation_alert():
    # ... (–¢–û–ß–ù–û –¢–ê–ö–û–ô –ñ–ï –ö–û–î, –ö–ê–ö –í –ü–†–ï–î–´–î–£–©–ï–ú –û–¢–í–ï–¢–ï –î–õ–Ø –≠–¢–û–ô –§–£–ù–ö–¶–ò–ò)
    global pool, bot
    if not pool or not bot: logger.warning("Scheduler (Precipitation): Pool or Bot not initialized."); return
    logger.info("Scheduler (Precipitation): >>> Checking for precipitation alerts.")
    try:
        subscriptions = await get_all_active_subscriptions_with_details(pool)
        if not subscriptions: return
        for sub in subscriptions:
            user_id, city, _, _, last_alert_time = sub['user_id'], sub['city'], sub['notification_time'], sub[
                'timezone'], sub.get('last_alert_sent_at')  # _ –¥–ª—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π
            if last_alert_time and (datetime.datetime.now(pytz.utc) - last_alert_time).total_seconds() < 3 * 3600:
                logger.info(f"Scheduler (Precipitation): Alert for {city} (user {user_id}) sent recently. Skipping.")
                continue
            alert_text = await check_for_precipitation_in_forecast(city, min_lead_minutes=30, max_lead_minutes=120)
            if alert_text:
                logger.info(f"Scheduler (Precipitation): Precipitation found for {city} (user {user_id}): {alert_text}")
                message_to_send = f"–í–Ω–∏–º–∞–Ω–∏–µ! –í –≥–æ—Ä–æ–¥–µ {city} —É—Ö—É–¥—à–∞–µ—Ç—Å—è –ø–æ–≥–æ–¥–∞. {alert_text}"
                await bot.send_message(user_id, message_to_send)
                await update_last_alert_time(pool, user_id, city)
                logger.info(f"Scheduler (Precipitation): Alert sent to {user_id} for {city}")
    except Exception as e:
        logger.error(f"Scheduler (Precipitation): Error: {e}", exc_info=True)


# --- FastAPI —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª ---
@app.get("/")
async def root():
    logger.info("Root endpoint '/' was called.")
    return {"status": "alive"}


@app.post("/webhook") # <--- –í–û–¢ –û–ù, –ö–õ–Æ–ß–ï–í–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö!
async def telegram_webhook(request: Request):
    logger.info(">>> Webhook endpoint CALLED!")
    try:
        body = await request.json()
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Ç–µ–ª–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω—è—Ç—å –ª–æ–≥–∏, –µ—Å–ª–∏ –æ–Ω–æ –±–æ–ª—å—à–æ–µ
        logger.info(f">>> Webhook BODY received (keys): {list(body.keys()) if isinstance(body, dict) else 'Not a dict'}")
        if logger.level == logging.DEBUG: # –ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ —Ç–æ–ª—å–∫–æ –≤ DEBUG —Ä–µ–∂–∏–º–µ
             logger.debug(f">>> Full Webhook BODY: {body}")

        update = types.Update(**body) # –ò—Å–ø–æ–ª—å–∑—É–µ–º types.Update –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
        logger.info(">>> Update object CREATED.")
        await dp.feed_update(bot=bot, update=update) # –ü–µ—Ä–µ–¥–∞–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        logger.info(">>> dp.feed_update COMPLETED.")
        return {"ok": True}
    except Exception as e:
        logger.exception(">>> EXCEPTION in webhook processing:")
        return {"ok": False, "error": str(e)}

@app.on_event("startup")
async def on_startup_combined():
    global pool, scheduler
    logger.info("API: Application startup sequence initiated...")
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ë–î
    if pool is None:
        logger.info("API: Startup - creating database pool.")
        pool = await get_pool()
        logger.info("API: Database pool created on startup.")
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±—Ö—É–∫–∞
    try:
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            logger.info(f"Webhook is set to: {webhook_info.url}")
        else:
            logger.warning("Webhook is NOT SET. Consider setting it.")
    except Exception as e:
        logger.error(f"Could not get webhook info: {e}")

    # 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –° –î–í–£–ú–Ø –ó–ê–î–ê–ß–ê–ú–ò
    # –ó–ê–î–ê–ß–ê 1: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å –≤ XX:01 UTC)
    scheduler.add_job(send_daily_morning_forecast_local_time, CronTrigger(minute=1, timezone=pytz.utc),
                      id="hourly_check_for_local_morning", replace_existing=True)
    logger.info("Scheduler: Job 'hourly_check_for_local_morning' set (every hour at XX:01 UTC).")

    # –ó–ê–î–ê–ß–ê 2: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Ö—É–¥—à–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å –≤ XX:05 UTC)
    scheduler.add_job(send_precipitation_alert, CronTrigger(minute=5, timezone=pytz.utc),
                      id="hourly_precipitation_check", replace_existing=True)
    logger.info("Scheduler: Job 'hourly_precipitation_check' set (every hour at XX:05 UTC).")

    if not scheduler.running:
        try:
            scheduler.start(); logger.info("APScheduler started.")
        except Exception as e:
            logger.error(f"Failed to start APScheduler: {e}")
    logger.info("API: Application startup sequence completed.")


@app.on_event("shutdown")
async def on_shutdown():
    # ... (–¢–û–ß–ù–û –¢–ê–ö–û–ô –ñ–ï –ö–û–î, –ö–ê–ö –í –ü–†–ï–î–´–î–£–©–ï–ú –û–¢–í–ï–¢–ï)
    global scheduler, pool
    logger.info("API: Application shutdown sequence initiated...")
    if scheduler and scheduler.running: scheduler.shutdown(); logger.info("APScheduler shut down.")
    if pool: await pool.close(); logger.info("Database pool closed.")
    logger.info("API: Application shutdown sequence completed.")