import os
import logging
import datetime  # –ò—Å–ø–æ–ª—å–∑—É–µ–º datetime.datetime –∏ datetime.time
import pytz

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, Router, F, types  # –î–æ–±–∞–≤–∏–ª–∏ types –¥–ª—è callback_query
from aiogram.types import Update, Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Ç–≤–æ–∏—Ö –º–æ–¥—É–ª–µ–π
from weather_api import get_weather, get_forecast, check_for_precipitation_in_forecast
from database import (
    get_pool, save_request, get_history,
    add_subscription, remove_subscription, get_user_subscriptions,
    get_all_active_subscriptions_with_details, update_last_alert_time
    # get_active_subscriptions_for_notification - –µ—Å–ª–∏ —Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è send_weather_notification –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —ç—Ç–æ —Ç–æ–∂–µ –Ω–µ –Ω—É–∂–Ω–æ
)

# APScheduler
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# from pytz import utc # pytz.utc –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –¥–ª—è –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
logger = logging.getLogger(__name__)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# Aiogram setup
storage = MemoryStorage()
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
pool = None
scheduler = AsyncIOScheduler(timezone=pytz.utc)


# --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ô FSM (–û–î–ù–û –û–ë–™–ï–î–ò–ù–ï–ù–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï) ---
class WeatherStates(StatesGroup):
    waiting_for_city_current = State()  # –î–ª—è –∫–æ–º–∞–Ω–¥—ã "–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å"
    waiting_for_city_forecast = State()  # –î–ª—è –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è"
    waiting_for_city_subscribe = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    choosing_timezone = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    entering_notification_time = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    waiting_for_city_unsubscribe = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu_keyboard():
    kb = [
        [KeyboardButton(text="üå¶ –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å"), KeyboardButton(text="üóì –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")],
        [KeyboardButton(text="üîî –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"), KeyboardButton(text="üìú –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False)


def subscriptions_menu_keyboard():  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –∏–ª–∏ –ø–æ—Å–ª–µ –æ—Ç–ø–∏—Å–∫–∏
    kb = [
        [KeyboardButton(text="‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥–æ—Ä–æ–¥")],
        [KeyboardButton(text="‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥–æ—Ä–æ–¥–∞")],  # –≠—Ç—É –∫–Ω–æ–ø–∫—É –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False)


def back_keyboard():  # –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
    kb = [[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False)


# –°–ª–æ–≤–∞—Ä—å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–∞–π–º–∑–æ–Ω –¥–ª—è Inline-–∫–Ω–æ–ø–æ–∫
POPULAR_TIMEZONES = {
    "–ú–æ—Å–∫–≤–∞ (UTC+3)": "Europe/Moscow", "–õ–æ–Ω–¥–æ–Ω (GMT/BST)": "Europe/London",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (UTC+5)": "Asia/Yekaterinburg", "–ù—å—é-–ô–æ—Ä–∫ (EST/EDT)": "America/New_York",
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ (UTC+7)": "Asia/Novosibirsk", "–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å (PST/PDT)": "America/Los_Angeles",
    "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (UTC+10)": "Asia/Vladivostok", "–ë–µ—Ä–ª–∏–Ω (CET/CEST)": "Europe/Berlin",
    "–¢–æ–∫–∏–æ (UTC+9)": "Asia/Tokyo", "UTC": "UTC",
}


def timezone_choice_keyboard():
    buttons = [[InlineKeyboardButton(text=name, callback_data=f"tz_{iana}")] for name, iana in
               POPULAR_TIMEZONES.items()]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def initial_config_keyboard(city: str):  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    buttons = [
        [InlineKeyboardButton(text=f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –∏ –ø–æ—è—Å –¥–ª—è {city}", callback_data=f"cfgtime_{city}")],
        [InlineKeyboardButton(text="üëå –û—Å—Ç–∞–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (08:00, –ø–æ—è—Å –≥–æ—Ä–æ–¥–∞)", callback_data=f"cfgdef_{city}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def subscriptions_list_actions_keyboard(subscriptions: list):  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    buttons = []
    for sub in subscriptions:
        city = sub['city']
        time_obj = sub.get('notification_time')  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
        tz_str = sub.get('timezone', 'UTC')  # –î–µ—Ñ–æ–ª—Ç UTC, –µ—Å–ª–∏ –Ω–µ—Ç
        time_str = time_obj.strftime('%H:%M') if time_obj else "08:00"

        display_text = f"üèôÔ∏è {city} (—É—Ç—Ä–æ–º –≤ {time_str} –ø–æ –ø–æ—è—Å—É {tz_str} + –æ—Å–∞–¥–∫–∏)"
        buttons.append([InlineKeyboardButton(text=display_text, callback_data="noop")])  # noop - –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        buttons.append([
            InlineKeyboardButton(text=f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å {city}", callback_data=f"cfgtime_{city}"),
            InlineKeyboardButton(text=f"‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {city}", callback_data=f"unsub_{city}")
        ])
        buttons.append([InlineKeyboardButton(text="-" * 20, callback_data="noop")])  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="cfg_add_new_city")])
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cfg_back_main")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())


@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    # ... (–ª–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–∏—Ç—å –¥–ª—è FSM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
    # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    current_fsm_state = await state.get_state()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    logger.info(f"Back to menu called from state: {current_fsm_state}")
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())


# --- –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å / –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
# ... (ask_city_for_current_weather, process_current_weather_city) ...
# ... (ask_city_for_forecast, process_forecast_city) ...

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ ---
@router.message(F.text == "üîî –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
async def manage_subscriptions_menu_entry(message: Message, state: FSMContext):
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    global pool
    if not pool: pool = await get_pool()
    user_id = message.from_user.id

    try:
        subscriptions = await get_user_subscriptions(pool, user_id)
        if subscriptions:
            await message.answer("–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
                                 reply_markup=subscriptions_list_actions_keyboard(subscriptions))
        else:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?",
                                 reply_markup=subscriptions_menu_keyboard())  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥–æ—Ä–æ–¥"
    except Exception as e:
        logger.error(f"Error fetching subscriptions for user {user_id}: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())


# Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥" –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
@router.callback_query(F.data == "cfg_add_new_city")
async def cb_ask_city_to_subscribe(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.set_state(WeatherStates.waiting_for_city_subscribe)
    await callback_query.message.edit_text(  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n"
        "- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ 08:00 (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è).\n"
        "- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –æ—Å–∞–¥–∫–∞—Ö.",
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∂–¥–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
    )
    # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ReplyKeyboard "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    await bot.send_message(callback_query.from_user.id, "–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=back_keyboard())


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥–æ—Ä–æ–¥"
@router.message(F.text == "‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥–æ—Ä–æ–¥")
async def text_ask_city_to_subscribe(message: Message, state: FSMContext):
    await state.set_state(WeatherStates.waiting_for_city_subscribe)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n"
                         "- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ 08:00 (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è).\n"
                         "- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –æ—Å–∞–¥–∫–∞—Ö.",
                         reply_markup=back_keyboard())


# –®–∞–≥ 1 –ø–æ–¥–ø–∏—Å–∫–∏: –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞
@router.message(WeatherStates.waiting_for_city_subscribe, F.text)
async def process_new_city_for_subscription(message: Message, state: FSMContext):
    city_input = message.text.strip()
    if city_input == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
        return
    if not city_input or "/" in city_input:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
                            reply_markup=back_keyboard())
        return

    global pool
    if not pool: pool = await get_pool()
    weather_check = await get_weather(city_input)
    if "–û—à–∏–±–∫–∞:" in weather_check:
        await message.reply(f"–ì–æ—Ä–æ–¥ '{city_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.",
                            reply_markup=back_keyboard())
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä)
    user_timezone_str = "UTC"  # –î–µ—Ñ–æ–ª—Ç
    city_lower = city_input.lower()
    if city_lower == "–º–æ—Å–∫–≤–∞":
        user_timezone_str = "Europe/Moscow"
    # ... (–¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞) ...
    elif "–¥—É–∞–ª–∞" in city_lower or "–∫–∞–º–µ—Ä—É–Ω" in city_lower:
        user_timezone_str = "Africa/Douala"

    try:
        await add_subscription(pool, message.from_user.id, city_input,
                               notification_time_str="08:00:00",  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –≤—Ä–µ–º—è
                               user_timezone_str=user_timezone_str)  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è/–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞

        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        await message.answer(
            f"‚úÖ –ì–æ—Ä–æ–¥ {city_input} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–ø–∏—Å–∫–∏!\n"
            f"–£—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 08:00 (—Ç–∞–π–º–∑–æ–Ω–∞: {user_timezone_str}).\n"
            "–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞?",
            reply_markup=initial_config_keyboard(city_input)
        )
    except Exception as e:
        logger.error(f"Error adding initial subscription for {city_input}: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())
        await state.clear()


# Callback –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å" –∏–ª–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
@router.callback_query(F.data.startswith("cfgtime_") | F.data.startswith("cfgdef_"))
async def handle_subscription_config_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    action, city_name = callback_query.data.split("_", 1)

    if action == "cfgdef":
        await callback_query.message.edit_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥. {city_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ 08:00 –ø–æ —Ç–∞–π–º–∑–æ–Ω–µ –≥–æ—Ä–æ–¥–∞, –ø–ª—é—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –æ—Å–∞–¥–∫–∞—Ö)."
        )
        # –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        # await bot.send_message(callback_query.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
        return

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ "cfgtime_" (–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
    await state.update_data(configuring_city=city_name)
    await state.set_state(WeatherStates.choosing_timezone)
    await callback_query.message.edit_text(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≥. {city_name}.\n"
        "–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ —Å–ø–∏—Å–∫–∞ (–∏–ª–∏ –±–ª–∏–∂–∞–π—à–∏–π –∫ –≤–∞—à–µ–º—É).",
        reply_markup=timezone_choice_keyboard()
    )


# –®–∞–≥ 2 –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –≤—ã–±–æ—Ä —Ç–∞–π–º–∑–æ–Ω—ã
@router.callback_query(F.data.startswith("tz_"), WeatherStates.choosing_timezone)  # –î–æ–±–∞–≤–∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
async def process_timezone_choice_for_config(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    selected_timezone_iana = callback_query.data.split("_", 1)[1]

    user_data = await state.get_data()
    city_being_configured = user_data.get("configuring_city")

    if not city_being_configured:
        await callback_query.message.edit_text(
            "–û—à–∏–±–∫–∞: –≥–æ—Ä–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–∑ –º–µ–Ω—é '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'.")
        await state.clear()
        return

    await state.update_data(selected_timezone=selected_timezone_iana)
    await state.set_state(WeatherStates.entering_notification_time)
    await callback_query.message.edit_text(
        f"–î–ª—è –≥. {city_being_configured} –≤—ã–±—Ä–∞–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {selected_timezone_iana}.\n"
        "–®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:30)."
    )


# –®–∞–≥ 3 –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
@router.message(WeatherStates.entering_notification_time, F.text)
async def process_notification_time_input(message: Message, state: FSMContext):
    time_input_str = message.text.strip()
    try:
        parsed_time = datetime.datetime.strptime(time_input_str, "%H:%M").time()
        notification_time_for_db = parsed_time.strftime("%H:%M:00")
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00).")
        return

    user_data = await state.get_data()
    city_to_configure = user_data.get("configuring_city")
    selected_tz = user_data.get("selected_timezone")

    if not city_to_configure or not selected_tz:
        await message.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑ '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'.")
        await state.clear()
        return

    global pool
    if not pool: pool = await get_pool()
    user_id = message.from_user.id

    try:
        await add_subscription(pool, user_id, city_to_configure,
                               notification_time_str=notification_time_for_db,
                               user_timezone_str=selected_tz)
        await message.answer(
            f"üëç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –£—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≥. {city_to_configure} –±—É–¥–µ—Ç –≤ {parsed_time.strftime('%H:%M')} "
            f"–ø–æ –≤—Ä–µ–º–µ–Ω–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ {selected_tz}.",
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())
    finally:
        await state.clear()


# --- –û—Ç–ø–∏—Å–∫–∞ (—á–µ—Ä–µ–∑ Inline –∫–Ω–æ–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫) ---
@router.callback_query(F.data.startswith("unsub_"))
async def cb_process_unsubscribe_city(callback_query: types.CallbackQuery,
                                      state: FSMContext):  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–æ
    await callback_query.answer()
    city_to_unsubscribe = callback_query.data.split("_", 1)[1]

    global pool
    if not pool: pool = await get_pool()
    user_id = callback_query.from_user.id

    try:
        await remove_subscription(pool, user_id, city_to_unsubscribe)
        await callback_query.message.edit_text(
            f"üóë –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≥. {city_to_unsubscribe}."
        )
        # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
        # –ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await bot.send_message(user_id, "–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_menu_keyboard())

    except Exception as e:
        logger.error(f"Error removing subscription for user {user_id}, city {city_to_unsubscribe} via CB: {e}",
                     exc_info=True)
        await callback_query.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥–æ—Ä–æ–¥–∞" (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
# @router.message(F.text == "‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥–æ—Ä–æ–¥–∞") ...
# @router.message(WeatherStates.waiting_for_city_unsubscribe, F.text) ...


# --- –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
# ... (show_history, history_via_button, history_command_handler) ...

# --- –ü–õ–ê–ù–ò–†–û–í–©–ò–ö: –î–í–ï –§–£–ù–ö–¶–ò–ò –†–ê–°–°–´–õ–ö–ò ---
# 1. send_daily_morning_forecast_local_time (–∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç—ã–≤–∞–µ—Ç timezone –∏ notification_time)
async def send_daily_morning_forecast_local_time():
    # ... (–¢–û–ß–ù–û –¢–ê–ö–û–ô –ñ–ï –ö–û–î, –ö–ê–ö –í –ü–†–ï–î–´–î–£–©–ï–ú –û–¢–í–ï–¢–ï –î–õ–Ø –≠–¢–û–ô –§–£–ù–ö–¶–ò–ò)
    global pool, bot
    if not pool or not bot: logger.warning("Scheduler (Morning): Pool or Bot not initialized."); return
    logger.info("Scheduler (Morning): >>> Checking for local 08:00 AM forecasts.")
    current_utc_dt = datetime.datetime.now(pytz.utc)
    try:
        all_subscriptions = await get_all_active_subscriptions_with_details(pool)
        if not all_subscriptions: return
        for sub in all_subscriptions:
            user_id, city, user_notification_time_obj, user_timezone_str, _ = sub['user_id'], sub['city'], sub[
                'notification_time'], sub['timezone'], sub.get('last_alert_sent_at')  # _ –¥–ª—è last_alert_sent_at
            if not user_notification_time_obj or not user_timezone_str: continue
            try:
                user_tz = pytz.timezone(user_timezone_str)
            except pytz.UnknownTimeZoneError:
                logger.error(f"Unknown tz {user_timezone_str}"); continue
            user_local_date_today = current_utc_dt.astimezone(user_tz).date()
            target_local_datetime_obj = datetime.datetime.combine(user_local_date_today, user_notification_time_obj)
            target_local_datetime_aware = user_tz.localize(target_local_datetime_obj, is_dst=None)
            target_utc_hour = target_local_datetime_aware.astimezone(pytz.utc).hour
            if (current_utc_dt.hour == target_utc_hour and
                    user_notification_time_obj.minute == 0 and  # –¢–æ—á–Ω–æ –≤ –•–•:00
                    current_utc_dt.minute < 5):
                logger.info(f"Scheduler (Morning): Time for {city} (user {user_id})")
                weather_info = await get_weather(city)
                if "–û—à–∏–±–∫–∞:" not in weather_info:
                    msg = f"‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü–æ–≥–æ–¥–∞ –≤ –≥. {city} –Ω–∞ {user_notification_time_obj.strftime('%H:%M')} –ø–æ –≤–∞—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏:\n\n{weather_info}"
                    await bot.send_message(user_id, msg)
                    logger.info(f"Scheduler (Morning): Sent to {user_id} for {city}")
    except Exception as e:
        logger.error(f"Scheduler (Morning): Error: {e}", exc_info=True)


# 2. send_precipitation_alert (–∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç last_alert_sent_at –∏ check_for_precipitation_in_forecast)
async def send_precipitation_alert():
    # ... (–¢–û–ß–ù–û –¢–ê–ö–û–ô –ñ–ï –ö–û–î, –ö–ê–ö –í –ü–†–ï–î–´–î–£–©–ï–ú –û–¢–í–ï–¢–ï –î–õ–Ø –≠–¢–û–ô –§–£–ù–ö–¶–ò–ò)
    global pool, bot
    if not pool or not bot: logger.warning("Scheduler (Precipitation): Pool or Bot not initialized."); return
    logger.info("Scheduler (Precipitation): >>> Checking for precipitation alerts.")
    try:
        subscriptions = await get_all_active_subscriptions_with_details(pool)
        if not subscriptions: return
        for sub in subscriptions:
            user_id, city, _, _, last_alert_time = sub['user_id'], sub['city'], sub['notification_time'], sub[
                'timezone'], sub.get('last_alert_sent_at')  # _ –¥–ª—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π
            if last_alert_time and (datetime.datetime.now(pytz.utc) - last_alert_time).total_seconds() < 3 * 3600:
                logger.info(f"Scheduler (Precipitation): Alert for {city} (user {user_id}) sent recently. Skipping.")
                continue
            alert_text = await check_for_precipitation_in_forecast(city, min_lead_minutes=30, max_lead_minutes=120)
            if alert_text:
                logger.info(f"Scheduler (Precipitation): Precipitation found for {city} (user {user_id}): {alert_text}")
                message_to_send = f"–í–Ω–∏–º–∞–Ω–∏–µ! –í –≥–æ—Ä–æ–¥–µ {city} —É—Ö—É–¥—à–∞–µ—Ç—Å—è –ø–æ–≥–æ–¥–∞. {alert_text}"
                await bot.send_message(user_id, message_to_send)
                await update_last_alert_time(pool, user_id, city)
                logger.info(f"Scheduler (Precipitation): Alert sent to {user_id} for {city}")
    except Exception as e:
        logger.error(f"Scheduler (Precipitation): Error: {e}", exc_info=True)


# --- FastAPI —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª ---
# ... (root, webhook) ...

@app.on_event("startup")
async def on_startup_combined():
    global pool, scheduler
    logger.info("API: Application startup sequence initiated...")
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ë–î
    if pool is None:
        logger.info("API: Startup - creating database pool.")
        pool = await get_pool()
        logger.info("API: Database pool created on startup.")
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±—Ö—É–∫–∞
    try:
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            logger.info(f"Webhook is set to: {webhook_info.url}")
        else:
            logger.warning("Webhook is NOT SET. Consider setting it.")
    except Exception as e:
        logger.error(f"Could not get webhook info: {e}")

    # 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –° –î–í–£–ú–Ø –ó–ê–î–ê–ß–ê–ú–ò
    # –ó–ê–î–ê–ß–ê 1: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å –≤ XX:01 UTC)
    scheduler.add_job(send_daily_morning_forecast_local_time, CronTrigger(minute=1, timezone=pytz.utc),
                      id="hourly_check_for_local_morning", replace_existing=True)
    logger.info("Scheduler: Job 'hourly_check_for_local_morning' set (every hour at XX:01 UTC).")

    # –ó–ê–î–ê–ß–ê 2: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Ö—É–¥—à–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å –≤ XX:05 UTC)
    scheduler.add_job(send_precipitation_alert, CronTrigger(minute=5, timezone=pytz.utc),
                      id="hourly_precipitation_check", replace_existing=True)
    logger.info("Scheduler: Job 'hourly_precipitation_check' set (every hour at XX:05 UTC).")

    if not scheduler.running:
        try:
            scheduler.start(); logger.info("APScheduler started.")
        except Exception as e:
            logger.error(f"Failed to start APScheduler: {e}")
    logger.info("API: Application startup sequence completed.")


@app.on_event("shutdown")
async def on_shutdown():
    # ... (–¢–û–ß–ù–û –¢–ê–ö–û–ô –ñ–ï –ö–û–î, –ö–ê–ö –í –ü–†–ï–î–´–î–£–©–ï–ú –û–¢–í–ï–¢–ï)
    global scheduler, pool
    logger.info("API: Application shutdown sequence initiated...")
    if scheduler and scheduler.running: scheduler.shutdown(); logger.info("APScheduler shut down.")
    if pool: await pool.close(); logger.info("Database pool closed.")
    logger.info("API: Application shutdown sequence completed.")