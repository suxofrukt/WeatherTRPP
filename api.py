import os
import logging
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Update, Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Ç–≤–æ–∏—Ö –º–æ–¥—É–ª–µ–π
from weather_api import get_weather, get_forecast
from database import (
    get_pool, save_request, get_history,
    add_subscription, remove_subscription, get_user_subscriptions,
    get_active_subscriptions_for_notification
)

# APScheduler
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from pytz import utc

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
logger = logging.getLogger(__name__)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# Aiogram setup
storage = MemoryStorage()
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
pool = None
scheduler = AsyncIOScheduler(timezone=utc) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–¥–µ—Å—å

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu_keyboard():
    kb = [
        [KeyboardButton(text="üå¶ –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å"), KeyboardButton(text="üóì –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")],
        [KeyboardButton(text="üîî –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"), KeyboardButton(text="üìú –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False)

def subscriptions_menu_keyboard():
    kb = [
        [KeyboardButton(text="‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥–æ—Ä–æ–¥")],
        [KeyboardButton(text="‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥–æ—Ä–æ–¥–∞")],
        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False)

def back_keyboard():
    kb = [[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è (States) ---
class WeatherStates(StatesGroup):
    waiting_for_city_current = State()
    waiting_for_city_forecast = State()
    waiting_for_city_subscribe = State()
    waiting_for_city_unsubscribe = State()

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu_keyboard()
    )

@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    current_state = await state.get_state()
    await state.clear()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏–∑ –∫–∞–∫–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if current_state and any(sub_state in current_state for sub_state in [
        WeatherStates.waiting_for_city_subscribe.state,
        WeatherStates.waiting_for_city_unsubscribe.state
    ]):
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫.", reply_markup=subscriptions_menu_keyboard())
    else:
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())


# --- –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å ---
@router.message(F.text == "üå¶ –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
async def ask_city_for_current_weather(message: Message, state: FSMContext):
    await state.set_state(WeatherStates.waiting_for_city_current)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=back_keyboard())

@router.message(WeatherStates.waiting_for_city_current, F.text)
async def process_current_weather_city(message: Message, state: FSMContext):
    city = message.text.strip()
    if city == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é": # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ "/"
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
        return
    if not city or "/" in city:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_keyboard())
        return

    await state.clear()
    global pool
    if not pool: pool = await get_pool()

    weather_info = await get_weather(city)
    await message.answer(weather_info, reply_markup=main_menu_keyboard())

    if message.from_user and message.from_user.username and "–û—à–∏–±–∫–∞:" not in weather_info:
        try:
            await save_request(pool, message.from_user.username, city, datetime.now())
        except Exception as e:
            logger.error(f"Error saving current weather request for {city}: {e}")

# --- –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è ---
@router.message(F.text == "üóì –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
async def ask_city_for_forecast(message: Message, state: FSMContext):
    await state.set_state(WeatherStates.waiting_for_city_forecast)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=back_keyboard())

@router.message(WeatherStates.waiting_for_city_forecast, F.text)
async def process_forecast_city(message: Message, state: FSMContext):
    city = message.text.strip()
    if city == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
        return
    if not city or "/" in city:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_keyboard())
        return

    await state.clear()
    global pool
    if not pool: pool = await get_pool()

    forecast_info = await get_forecast(city)
    await message.answer(forecast_info, reply_markup=main_menu_keyboard())

    if message.from_user and message.from_user.username and "–û—à–∏–±–∫–∞:" not in forecast_info:
        try:
            await save_request(pool, message.from_user.username, city, datetime.now())
        except Exception as e:
            logger.error(f"Error saving forecast request for {city}: {e}")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ ---
@router.message(F.text == "üîî –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
async def manage_subscriptions_menu_handler(message: Message, state: FSMContext): # –ò–∑–º–µ–Ω–∏–ª –∏–º—è –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    await state.clear()
    global pool
    if not pool: pool = await get_pool()

    user_id = message.from_user.id
    try:
        subscriptions = await get_user_subscriptions(pool, user_id)
        if subscriptions:
            subs_text_parts = []
            for sub in subscriptions:
                time_str = sub['notification_time'].strftime('%H:%M') if sub['notification_time'] else "N/A"
                tz_str = sub['timezone'] if sub['timezone'] else "N/A"
                subs_text_parts.append(f"üèôÔ∏è {sub['city']} (–≤ {time_str} {tz_str})")
            subs_text = "\n".join(subs_text_parts)
            response_text = f"–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n{subs_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            response_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await message.answer(response_text, reply_markup=subscriptions_menu_keyboard())
    except Exception as e:
        logger.error(f"Error fetching subscriptions for user {user_id}: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())


@router.message(F.text == "‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥–æ—Ä–æ–¥")
async def ask_city_to_subscribe(message: Message, state: FSMContext):
    await state.set_state(WeatherStates.waiting_for_city_subscribe)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ ~08:00 UTC):", reply_markup=back_keyboard())

@router.message(WeatherStates.waiting_for_city_subscribe, F.text)
async def process_subscribe_city(message: Message, state: FSMContext):
    city = message.text.strip()
    if city == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫.", reply_markup=subscriptions_menu_keyboard())
        return
    if not city or "/" in city:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_keyboard())
        return

    await state.clear()
    global pool
    if not pool: pool = await get_pool()
    user_id = message.from_user.id

    weather_check = await get_weather(city)
    if "–û—à–∏–±–∫–∞:" in weather_check:
        await message.answer(f"–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.\n{weather_check}",
                             reply_markup=subscriptions_menu_keyboard())
        return

    try:
        await add_subscription(pool, user_id, city)
        await message.answer(f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≥. {city} (–≤ ~08:00 UTC).",
                             reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.error(f"Error adding subscription for user {user_id}, city {city}: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=subscriptions_menu_keyboard())

@router.message(F.text == "‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥–æ—Ä–æ–¥–∞")
async def ask_city_to_unsubscribe(message: Message, state: FSMContext):
    global pool
    if not pool: pool = await get_pool()
    user_id = message.from_user.id

    try:
        subscriptions = await get_user_subscriptions(pool, user_id)
        if not subscriptions:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=subscriptions_menu_keyboard())
            return

        await state.set_state(WeatherStates.waiting_for_city_unsubscribe)
        subs_list_text = "\n".join([f"- {sub['city']}" for sub in subscriptions])
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:\n{subs_list_text}",
                             reply_markup=back_keyboard())
    except Exception as e:
        logger.error(f"Error fetching subscriptions for unsubscribe for user {user_id}: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=subscriptions_menu_keyboard())


@router.message(WeatherStates.waiting_for_city_unsubscribe, F.text)
async def process_unsubscribe_city(message: Message, state: FSMContext):
    city_to_unsubscribe = message.text.strip()
    if city_to_unsubscribe == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫.", reply_markup=subscriptions_menu_keyboard())
        return
    if not city_to_unsubscribe: # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_keyboard())
        return

    await state.clear()
    global pool
    if not pool: pool = await get_pool()
    user_id = message.from_user.id

    try:
        current_subs = await get_user_subscriptions(pool, user_id)
        if not any(sub['city'].lower() == city_to_unsubscribe.lower() for sub in current_subs):
            await message.answer(f"–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥–æ—Ä–æ–¥ '{city_to_unsubscribe}'.",
                                 reply_markup=subscriptions_menu_keyboard())
            return

        await remove_subscription(pool, user_id, city_to_unsubscribe)
        await message.answer(f"üóë –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≥. {city_to_unsubscribe}.",
                             reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.error(f"Error removing subscription for user {user_id}, city {city_to_unsubscribe}: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ.", reply_markup=subscriptions_menu_keyboard())


# --- –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ ---
async def show_history(message: Message):
    global pool
    if not pool: pool = await get_pool()
    logger.info(f"User {message.from_user.id} requested history.")

    username = message.from_user.username # –ò—Å—Ç–æ—Ä–∏—è –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ username
    if not username:
        await message.answer("–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram. –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∞.", reply_markup=main_menu_keyboard())
        return

    try:
        rows = await get_history(pool, username)
        if not rows:
            await message.answer("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.", reply_markup=main_menu_keyboard())
            return

        history_text_parts = [f"üìç {idx + 1}. {row['city']} ‚Äî {row['request_time'].strftime('%Y-%m-%d %H:%M')}"
                              for idx, row in enumerate(rows)]
        history_text = "\n".join(history_text_parts)
        if len(history_text) > 4000:
             history_text = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í–æ—Ç —á–∞—Å—Ç—å –∏–∑ –Ω–∏—Ö:\n" + history_text[:3900] + "\n(...)"
        await message.answer(f"üïò –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n{history_text}", reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.error(f"Error fetching history for username {username}: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.", reply_markup=main_menu_keyboard())

@router.message(F.text == "üìú –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è")
async def history_via_button(message: Message):
    await show_history(message)

@router.message(Command("history"))
async def history_command_handler(message: Message):
    await show_history(message)

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
async def send_weather_notification():
    global pool, bot
    if not pool or not bot:
        logger.warning("Scheduler: Pool or Bot not initialized. Skipping notifications.")
        return

    logger.info("Scheduler: Checking for notifications to send...")
    target_time_str = '08:00' # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ 08:00 UTC

    try:
        subscriptions_to_notify = await get_active_subscriptions_for_notification(pool, target_time_str)
        logger.info(f"Scheduler: Found {len(subscriptions_to_notify)} subscriptions for {target_time_str} UTC.")

        for sub in subscriptions_to_notify:
            user_id = sub['user_id']
            city = sub['city']
            try:
                weather_info = await get_weather(city)
                if "–û—à–∏–±–∫–∞:" not in weather_info:
                    await bot.send_message(user_id, f"‚òÄÔ∏è –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥. {city}:\n\n{weather_info}")
                    logger.info(f"Scheduler: Sent weather update for {city} to user {user_id}")
                else:
                    logger.warning(f"Scheduler: Could not get weather for {city} (user {user_id}): {weather_info}")
            except Exception as e:
                logger.error(f"Scheduler: Failed to send notification to user {user_id} for {city}. Error: {e}", exc_info=True)
                # –í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ N –æ—à–∏–±–æ–∫, —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç.–¥.
    except Exception as e:
        logger.error(f"Scheduler: General error in send_weather_notification job: {e}", exc_info=True)

# --- FastAPI —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª ---
@app.get("/")
async def root():
    return {"status": "alive"}

@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        body = await request.json()
        logger.debug(f"Received update via webhook: {body}")
        update = Update(**body)
        await dp.feed_update(bot=bot, update=update)
        return {"ok": True}
    except Exception as e:
        logger.exception("Error processing webhook:")
        return {"ok": False, "error": str(e)}

@app.on_event("startup")
async def on_startup_combined():
    global pool, scheduler
    logger.info("API: Application startup sequence initiated...")

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ë–î
    if pool is None:
        logger.info("API: Startup - creating database pool.")
        pool = await get_pool()
        logger.info("API: Database pool created on startup.")
    else:
        logger.info("API: Startup - database pool already exists.")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ)
    try:
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            logger.info(f"Webhook is set to: {webhook_info.url}")
        else:
            logger.warning("Webhook is NOT SET. Consider setting it for production.")
    except Exception as e:
        logger.error(f"Could not get webhook info: {e}")


    # 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ APScheduler
    # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00 UTC
    scheduler.add_job(send_weather_notification, CronTrigger(hour=8, minute=0, timezone=utc),
                      id="daily_weather_8am_utc", replace_existing=True)
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤—ã—à–µ –∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é:
    # scheduler.add_job(send_weather_notification, CronTrigger(minute='*', timezone=utc),
    #                   id="test_every_minute", replace_existing=True)
    # logger.info("Scheduler: Test job (every minute) has been set.")


    if not scheduler.running:
        try:
            scheduler.start()
            logger.info("APScheduler started.")
        except Exception as e:
            logger.error(f"Failed to start APScheduler: {e}")
    else:
        logger.info("APScheduler already running.")
    logger.info("API: Application startup sequence completed.")

@app.on_event("shutdown")
async def on_shutdown():
    global scheduler, pool
    logger.info("API: Application shutdown sequence initiated...")
    if scheduler and scheduler.running:
        scheduler.shutdown()
        logger.info("APScheduler shut down.")
    if pool:
        await pool.close() # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π asyncpg
        logger.info("Database pool closed.")
    logger.info("API: Application shutdown sequence completed.")