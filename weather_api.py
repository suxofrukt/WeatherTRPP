import requests
import os
from dotenv import load_dotenv
import datetime
import pytz


load_dotenv()
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

def format_weather_response(data, city):
    weather_desc = data["weather"][0]["description"].capitalize()
    temp = data["main"]["temp"]
    humidity = data["main"]["humidity"]
    wind_speed = data["wind"]["speed"]

    return (f"üåç –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"‚òÅ {weather_desc}")

async def get_weather(city):
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    data = response.json()

    if data.get("cod") != 200:
        return f"–û—à–∏–±–∫–∞: {data.get('message', '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')}"

    return format_weather_response(data, city)

async def get_forecast(city):
    url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    data = response.json()

    if data.get("cod") != "200":
        return f"–û—à–∏–±–∫–∞: {data.get('message', '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')}"

    forecast_text = f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {city} (3 –¥–Ω—è):\n"
    count = 0
    for item in data["list"]:
        dt_txt = item["dt_txt"]
        if "12:00:00" in dt_txt:
            desc = item["weather"][0]["description"].capitalize()
            temp = item["main"]["temp"]
            forecast_text += f"\nüìÜ {dt_txt[:10]}: {temp}¬∞C, {desc}"
            count += 1
        if count == 3:
            break

    return forecast_text

def detect_weather_alerts(data):
    alerts = []
    temp = data["main"]["temp"]
    wind = data["wind"]["speed"]

    if temp < -10:
        alerts.append("üßä –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ!")
    elif temp > 30:
        alerts.append("üî• –ñ–∞—Ä–∞!")

    if wind > 10:
        alerts.append("üå™ –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä!")

    return alerts

PRECIPITATION_CODES = {
    # Drizzle
    300, 301, 302, 310, 311, 312, 313, 314, 321,
    # Rain
    500, 501, 502, 503, 504, 511, 520, 521, 522, 531,
    # Snow
    600, 601, 602, 611, 612, 613, 615, 616, 620, 621, 622,
    # Thunderstorm
    200, 201, 202, 210, 211, 212, 221, 230, 231, 232,
    800, 801, 802, 803, 804, 805, 810, 811, 812
}


async def check_for_precipitation_in_forecast(city: str,
                                              min_lead_minutes: int = 30,
                                              max_lead_minutes: int = 120):
    url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
    except requests.RequestException as e:
        print(f"ERROR (check_for_precipitation_in_forecast): –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {city}: {e}")
        return None

    if str(data.get("cod")) != "200":
        # logger.warning(f"API error for {city}: {data.get('message')}")
        print(f"DEBUG (check_for_precipitation_in_forecast): API error for {city}: {data.get('message')}")
        return None

    city_timezone_offset_seconds = data.get("city", {}).get("timezone")
    current_utc_time = datetime.datetime.now(pytz.utc)

    intervals_to_check = ((max_lead_minutes // 60) + 2) // 3 + 1
    if intervals_to_check < 2:  # –ú–∏–Ω–∏–º—É–º 2 –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (6 —á–∞—Å–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞), —á—Ç–æ–±—ã –±—ã–ª–æ –∏–∑ —á–µ–≥–æ –≤—ã–±–∏—Ä–∞—Ç—å
        intervals_to_check = 2

    first_relevant_precipitation = None  # –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –∑–¥–µ—Å—å –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ

    for forecast_item in data.get("list", [])[:intervals_to_check]:
        weather_id = forecast_item.get("weather", [{}])[0].get("id")
        if weather_id in PRECIPITATION_CODES:
            description = forecast_item.get("weather", [{}])[0].get("description", "–æ—Å–∞–¥–∫–∏")
            dt_txt_utc_str = forecast_item.get("dt_txt", "")

            try:
                forecast_utc_time = pytz.utc.localize(datetime.datetime.strptime(dt_txt_utc_str, "%Y-%m-%d %H:%M:%S"))

                time_difference_minutes = (forecast_utc_time - current_utc_time).total_seconds() / 60.0

                # –£—Å–ª–æ–≤–∏–µ: –æ—Å–∞–¥–∫–∏ –≤ –±—É–¥—É—â–µ–º, –Ω–µ —Ä–∞–Ω–µ–µ min_lead_minutes –∏ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ max_lead_minutes
                if min_lead_minutes <= time_difference_minutes <= max_lead_minutes:
                    local_time_str = forecast_utc_time.strftime('%H:%M')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é UTC
                    if city_timezone_offset_seconds is not None:
                        city_tz = datetime.timezone(datetime.timedelta(seconds=city_timezone_offset_seconds))
                        local_time = forecast_utc_time.astimezone(city_tz)
                        local_time_str = local_time.strftime('%H:%M')

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—â–µ–º *–ø–µ—Ä–≤–æ–µ* –ø–æ–¥—Ö–æ–¥—è—â–µ–µ
                    first_relevant_precipitation = f"–û–∂–∏–¥–∞—é—Ç—Å—è –æ—Å–∞–¥–∫–∏ ({description}) –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ {local_time_str} –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (—á–µ—Ä–µ–∑ ~{int(time_difference_minutes // 60)} —á {int(time_difference_minutes % 60)} –º–∏–Ω)."
                    break  # –ù–∞—à–ª–∏ –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ, –¥–∞–ª—å—à–µ –Ω–µ –∏—â–µ–º
                # else:
                # print(f"DEBUG: Precipitation for {city} at {forecast_utc_time} is outside desired window ({min_lead_minutes}-{max_lead_minutes} min). Diff: {time_difference_minutes:.0f} min")
            except ValueError:
                print(
                    f"WARNING (check_for_precipitation_in_forecast): Could not parse forecast time {dt_txt_utc_str} for {city}")
                continue

    return first_relevant_precipitation