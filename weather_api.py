import requests
import os
from dotenv import load_dotenv

load_dotenv()
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

def format_weather_response(data, city):
    weather_desc = data["weather"][0]["description"].capitalize()
    temp = data["main"]["temp"]
    humidity = data["main"]["humidity"]
    wind_speed = data["wind"]["speed"]

    return (f"üåç –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"‚òÅ {weather_desc}")

async def get_weather(city):
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    data = response.json()

    if data.get("cod") != 200:
        return f"–û—à–∏–±–∫–∞: {data.get('message', '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')}"

    return format_weather_response(data, city)

async def get_forecast(city):
    url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    data = response.json()

    if data.get("cod") != "200":
        return f"–û—à–∏–±–∫–∞: {data.get('message', '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')}"

    forecast_text = f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {city} (3 –¥–Ω—è):\n"
    count = 0
    for item in data["list"]:
        dt_txt = item["dt_txt"]
        if "12:00:00" in dt_txt:
            desc = item["weather"][0]["description"].capitalize()
            temp = item["main"]["temp"]
            forecast_text += f"\nüìÜ {dt_txt[:10]}: {temp}¬∞C, {desc}"
            count += 1
        if count == 3:
            break

    return forecast_text

def detect_weather_alerts(data):
    alerts = []
    temp = data["main"]["temp"]
    wind = data["wind"]["speed"]

    if temp < -10:
        alerts.append("üßä –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ!")
    elif temp > 30:
        alerts.append("üî• –ñ–∞—Ä–∞!")

    if wind > 10:
        alerts.append("üå™ –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä!")

    return alerts

PRECIPITATION_CODES = {
    # Drizzle
    300, 301, 302, 310, 311, 312, 313, 314, 321,
    # Rain
    500, 501, 502, 503, 504, 511, 520, 521, 522, 531,
    # Snow
    600, 601, 602, 611, 612, 613, 615, 616, 620, 621, 622,
    # Thunderstorm
    200, 201, 202, 210, 211, 212, 221, 230, 231, 232
}


async def check_for_precipitation_in_forecast(city: str, hours_ahead: int = 6):
    #–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Å–∞–¥–∫–æ–≤ (–¥–æ–∂–¥—å/—Å–Ω–µ–≥) –≤ –±–ª–∏–∂–∞–π—à–∏–µ `hours_ahead` —á–∞—Å–æ–≤.
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º 3-—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑
    url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"

    # –î–µ–ª–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ aiohttp.
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()  # –í—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è 4xx/5xx –æ—Ç–≤–µ—Ç–æ–≤
        data = response.json()
    except requests.RequestException as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —Ç.–∫. –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
        print(
            f"Error fetching forecast for {city}: {e}")  # –ó–∞–º–µ–Ω–∏ –Ω–∞ logger.error, –µ—Å–ª–∏ weather_api –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ª–æ–≥–≥–µ—Ä—É
        return None

    if str(data.get("cod")) != "200":
        return None

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ 3-—á–∞—Å–æ–≤—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
    intervals_to_check = (hours_ahead + 2) // 3  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö

    for forecast_item in data.get("list", [])[:intervals_to_check]:
        weather_id = forecast_item.get("weather", [{}])[0].get("id")
        if weather_id in PRECIPITATION_CODES:
            # –ù–∞—à–ª–∏ –æ—Å–∞–¥–∫–∏! –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã.
            description = forecast_item.get("weather", [{}])[0].get("description", "–æ—Å–∞–¥–∫–∏")
            dt_txt = forecast_item.get("dt_txt", "")
            return f"–û–∂–∏–¥–∞—é—Ç—Å—è –æ—Å–∞–¥–∫–∏ ({description}) –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ {dt_txt.split(' ')[1][:5]}."

    # –ï—Å–ª–∏ –≤ —Ü–∏–∫–ª–µ –Ω–µ –Ω–∞—à–ª–∏ –æ—Å–∞–¥–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    return None